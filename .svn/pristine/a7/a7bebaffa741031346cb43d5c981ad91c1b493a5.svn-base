<!DOCTYPE HTML>
<!-- NewPage -->
<html lang="fr">
<head>
<!-- Generated by javadoc (11.0.25) on Mon Dec 02 12:51:10 CET 2024 -->
<title>Grille</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="dc.created" content="2024-12-02">
<link rel="stylesheet" type="text/css" href="../stylesheet.css" title="Style">
<link rel="stylesheet" type="text/css" href="../jquery/jquery-ui.min.css" title="Style">
<link rel="stylesheet" type="text/css" href="../jquery-ui.overrides.css" title="Style">
<script type="text/javascript" src="../script.js"></script>
<script type="text/javascript" src="../jquery/jszip/dist/jszip.min.js"></script>
<script type="text/javascript" src="../jquery/jszip-utils/dist/jszip-utils.min.js"></script>
<!--[if IE]>
<script type="text/javascript" src="../jquery/jszip-utils/dist/jszip-utils-ie.min.js"></script>
<![endif]-->
<script type="text/javascript" src="../jquery/jquery-3.7.1.min.js"></script>
<script type="text/javascript" src="../jquery/jquery-ui.min.js"></script>
</head>
<body>
<script type="text/javascript"><!--
    try {
        if (location.href.indexOf('is-external=true') == -1) {
            parent.document.title="Grille";
        }
    }
    catch(err) {
    }
//-->
var data = {"i0":10,"i1":10,"i2":10,"i3":10,"i4":10,"i5":10,"i6":10,"i7":10,"i8":10,"i9":10,"i10":10,"i11":10,"i12":10,"i13":10,"i14":10,"i15":10,"i16":10,"i17":10};
var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"]};
var altColor = "altColor";
var rowColor = "rowColor";
var tableTab = "tableTab";
var activeTableTab = "activeTableTab";
var pathtoroot = "../";
var useModuleDirectories = true;
loadScripts(document, 'script');</script>
<noscript>
<div>JavaScript is disabled on your browser.</div>
</noscript>
<header role="banner">
<nav role="navigation">
<div class="fixedNav">
<!-- ========= START OF TOP NAVBAR ======= -->
<div class="topNav"><a id="navbar.top">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.top" title="Skip navigation links">Skip navigation links</a></div>
<a id="navbar.top.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="../index.html">Overview</a></li>
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="../deprecated-list.html">Deprecated</a></li>
<li><a href="../index-all.html">Index</a></li>
<li><a href="../help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList" id="allclasses_navbar_top">
<li><a href="../allclasses.html">All&nbsp;Classes</a></li>
</ul>
<ul class="navListSearch">
<li><label for="search">SEARCH:</label>
<input type="text" id="search" value="search" disabled="disabled">
<input type="reset" id="reset" value="reset" disabled="disabled">
</li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_top");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
<noscript>
<div>JavaScript is disabled on your browser.</div>
</noscript>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li>Nested&nbsp;|&nbsp;</li>
<li>Field&nbsp;|&nbsp;</li>
<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li>Field&nbsp;|&nbsp;</li>
<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.detail">Method</a></li>
</ul>
</div>
<a id="skip.navbar.top">
<!--   -->
</a></div>
<!-- ========= END OF TOP NAVBAR ========= -->
</div>
<div class="navPadding">&nbsp;</div>
<script type="text/javascript"><!--
$('.navPadding').css('padding-top', $('.fixedNav').css("height"));
//-->
</script>
</nav>
</header>
<!-- ======== START OF CLASS DATA ======== -->
<main role="main">
<div class="header">
<div class="subTitle"><span class="packageLabelInType">Package</span>&nbsp;<a href="package-summary.html">model</a></div>
<h2 title="Class Grille" class="title">Class Grille</h2>
</div>
<div class="contentContainer">
<ul class="inheritance">
<li>java.lang.Object</li>
<li>
<ul class="inheritance">
<li>model.Grille</li>
</ul>
</li>
</ul>
<div class="description">
<ul class="blockList">
<li class="blockList">
<dl>
<dt>All Implemented Interfaces:</dt>
<dd><code><a href="proxy/GrilleInterface.html" title="interface in model.proxy">GrilleInterface</a></code></dd>
</dl>
<hr>
<pre>public class <span class="typeNameLabel">Grille</span>
extends java.lang.Object
implements <a href="proxy/GrilleInterface.html" title="interface in model.proxy">GrilleInterface</a></pre>
<div class="block">Classe représentant la grille de jeu.
 <p>
 La grille est composée de cases et gère les combattants, les murs, les pastilles d'énergie, etc.
 Elle fournit des méthodes pour initialiser le jeu, placer les éléments et gérer les actions au sein de la grille.</div>
</li>
</ul>
</div>
<div class="summary">
<ul class="blockList">
<li class="blockList">
<!-- ======== CONSTRUCTOR SUMMARY ======== -->
<section>
<ul class="blockList">
<li class="blockList"><a id="constructor.summary">
<!--   -->
</a>
<h3>Constructor Summary</h3>
<table class="memberSummary">
<caption><span>Constructors</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colFirst" scope="col">Constructor</th>
<th class="colLast" scope="col">Description</th>
</tr>
<tr class="altColor">
<th class="colConstructorName" scope="row"><code><span class="memberNameLink"><a href="#%3Cinit%3E(utils.strategyMessage.MessageHandler)">Grille</a></span>&#8203;(<a href="../utils/strategyMessage/MessageHandler.html" title="interface in utils.strategyMessage">MessageHandler</a>&nbsp;messageHandler)</code></th>
<td class="colLast">
<div class="block">Constructeur de la classe Grille.</div>
</td>
</tr>
</table>
</li>
</ul>
</section>
<!-- ========== METHOD SUMMARY =========== -->
<section>
<ul class="blockList">
<li class="blockList"><a id="method.summary">
<!--   -->
</a>
<h3>Method Summary</h3>
<table class="memberSummary">
<caption><span id="t0" class="activeTableTab"><span>All Methods</span><span class="tabEnd">&nbsp;</span></span><span id="t2" class="tableTab"><span><a href="javascript:show(2);">Instance Methods</a></span><span class="tabEnd">&nbsp;</span></span><span id="t4" class="tableTab"><span><a href="javascript:show(8);">Concrete Methods</a></span><span class="tabEnd">&nbsp;</span></span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colSecond" scope="col">Method</th>
<th class="colLast" scope="col">Description</th>
</tr>
<tr id="i0" class="altColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#afficherGrille()">afficherGrille</a></span>()</code></th>
<td class="colLast">
<div class="block">Affiche la grille dans la console.</div>
</td>
</tr>
<tr id="i1" class="rowColor">
<td class="colFirst"><code>boolean</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#estPositionValide(model.Position)">estPositionValide</a></span>&#8203;(<a href="Position.html" title="class in model">Position</a>&nbsp;pos)</code></th>
<td class="colLast">
<div class="block">Vérifie si une position donnée est valide au sein de la grille.</div>
</td>
</tr>
<tr id="i2" class="altColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#genererGrille(java.util.List)">genererGrille</a></span>&#8203;(java.util.List&lt;<a href="Combattant.html" title="class in model">Combattant</a>&gt;&nbsp;combattantsAPlacer)</code></th>
<td class="colLast">
<div class="block">Génère la grille en plaçant les murs, les pastilles d'énergie et les combattants.</div>
</td>
</tr>
<tr id="i3" class="rowColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#gererExplosionsDifferrees()">gererExplosionsDifferrees</a></span>()</code></th>
<td class="colLast">
<div class="block">Gère les explosions différées des bombes sur la grille.</div>
</td>
</tr>
<tr id="i4" class="altColor">
<td class="colFirst"><code>java.util.List&lt;<a href="Combattant.html" title="class in model">Combattant</a>&gt;</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#getAllCombattants()">getAllCombattants</a></span>()</code></th>
<td class="colLast">
<div class="block">Obtient la liste de tous les combattants présents sur la grille.</div>
</td>
</tr>
<tr id="i5" class="rowColor">
<td class="colFirst"><code><a href="Case.html" title="class in model">Case</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#getCase(model.Position)">getCase</a></span>&#8203;(<a href="Position.html" title="class in model">Position</a>&nbsp;position)</code></th>
<td class="colLast">
<div class="block">Obtient la case à une position donnée.</div>
</td>
</tr>
<tr id="i6" class="altColor">
<td class="colFirst"><code>java.util.List&lt;<a href="Combattant.html" title="class in model">Combattant</a>&gt;</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#getCombattantsProches(model.Position,int)">getCombattantsProches</a></span>&#8203;(<a href="Position.html" title="class in model">Position</a>&nbsp;pos,
                     int&nbsp;portee)</code></th>
<td class="colLast">
<div class="block">Recherche les combattants proches d'une position donnée dans la grille.</div>
</td>
</tr>
<tr id="i7" class="rowColor">
<td class="colFirst"><code>int</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#getLargeur()">getLargeur</a></span>()</code></th>
<td class="colLast">
<div class="block">Obtient la largeur de la grille.</div>
</td>
</tr>
<tr id="i8" class="altColor">
<td class="colFirst"><code>int</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#getLongueur()">getLongueur</a></span>()</code></th>
<td class="colLast">
<div class="block">Obtient la longueur de la grille.</div>
</td>
</tr>
<tr id="i9" class="rowColor">
<td class="colFirst"><code><a href="../utils/strategyMessage/MessageHandler.html" title="interface in utils.strategyMessage">MessageHandler</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#getMessageHandler()">getMessageHandler</a></span>()</code></th>
<td class="colLast">
<div class="block">Obtient le gestionnaire de messages.</div>
</td>
</tr>
<tr id="i10" class="altColor">
<td class="colFirst"><code><a href="Position.html" title="class in model">Position</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#getPositionCentrale()">getPositionCentrale</a></span>()</code></th>
<td class="colLast">
<div class="block">Obtient la position centrale de la grille.</div>
</td>
</tr>
<tr id="i11" class="rowColor">
<td class="colFirst"><code>java.util.List&lt;<a href="Position.html" title="class in model">Position</a>&gt;</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#getPositionsExplosif()">getPositionsExplosif</a></span>()</code></th>
<td class="colLast">
<div class="block">Récupère les positions des explosifs (mines, bombes) sur la grille.</div>
</td>
</tr>
<tr id="i12" class="altColor">
<td class="colFirst"><code><a href="Combattant.html" title="class in model">Combattant</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#getWinner()">getWinner</a></span>()</code></th>
<td class="colLast">
<div class="block">Obtient le gagnant du jeu s'il y en a un.</div>
</td>
</tr>
<tr id="i13" class="rowColor">
<td class="colFirst"><code>boolean</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#isOver()">isOver</a></span>()</code></th>
<td class="colLast">
<div class="block">Vérifie si le jeu est terminé.</div>
</td>
</tr>
<tr id="i14" class="altColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#placerCombattants(java.util.List)">placerCombattants</a></span>&#8203;(java.util.List&lt;<a href="Combattant.html" title="class in model">Combattant</a>&gt;&nbsp;combattantsAPlacer)</code></th>
<td class="colLast">
<div class="block">Place les combattants sur la grille à des positions aléatoires non occupées.</div>
</td>
</tr>
<tr id="i15" class="rowColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#placerMurs()">placerMurs</a></span>()</code></th>
<td class="colLast">
<div class="block">Place des murs aléatoirement sur la grille.</div>
</td>
</tr>
<tr id="i16" class="altColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#placerPastillesEnergie()">placerPastillesEnergie</a></span>()</code></th>
<td class="colLast">
<div class="block">Place des pastilles d'énergie aléatoirement sur la grille.</div>
</td>
</tr>
<tr id="i17" class="rowColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#setMessageHandler(utils.strategyMessage.MessageHandler)">setMessageHandler</a></span>&#8203;(<a href="../utils/strategyMessage/MessageHandler.html" title="interface in utils.strategyMessage">MessageHandler</a>&nbsp;messageHandler)</code></th>
<td class="colLast">
<div class="block">Définit le gestionnaire de messages.</div>
</td>
</tr>
</table>
<ul class="blockList">
<li class="blockList"><a id="methods.inherited.from.class.java.lang.Object">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;java.lang.Object</h3>
<code>clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait</code></li>
</ul>
</li>
</ul>
</section>
</li>
</ul>
</div>
<div class="details">
<ul class="blockList">
<li class="blockList">
<!-- ========= CONSTRUCTOR DETAIL ======== -->
<section>
<ul class="blockList">
<li class="blockList"><a id="constructor.detail">
<!--   -->
</a>
<h3>Constructor Detail</h3>
<a id="&lt;init&gt;(utils.strategyMessage.MessageHandler)">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>Grille</h4>
<pre>public&nbsp;Grille&#8203;(<a href="../utils/strategyMessage/MessageHandler.html" title="interface in utils.strategyMessage">MessageHandler</a>&nbsp;messageHandler)</pre>
<div class="block">Constructeur de la classe Grille.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>messageHandler</code> - Le gestionnaire de messages pour afficher les informations du jeu.</dd>
</dl>
</li>
</ul>
</li>
</ul>
</section>
<!-- ============ METHOD DETAIL ========== -->
<section>
<ul class="blockList">
<li class="blockList"><a id="method.detail">
<!--   -->
</a>
<h3>Method Detail</h3>
<a id="getLongueur()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getLongueur</h4>
<pre class="methodSignature">public&nbsp;int&nbsp;getLongueur()</pre>
<div class="block">Obtient la longueur de la grille.</div>
<dl>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>La longueur de la grille.</dd>
</dl>
</li>
</ul>
<a id="estPositionValide(model.Position)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>estPositionValide</h4>
<pre class="methodSignature">public&nbsp;boolean&nbsp;estPositionValide&#8203;(<a href="Position.html" title="class in model">Position</a>&nbsp;pos)</pre>
<div class="block">Vérifie si une position donnée est valide au sein de la grille.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>pos</code> - La position à vérifier.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>true si la position est valide, false sinon.</dd>
</dl>
</li>
</ul>
<a id="getAllCombattants()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getAllCombattants</h4>
<pre class="methodSignature">public&nbsp;java.util.List&lt;<a href="Combattant.html" title="class in model">Combattant</a>&gt;&nbsp;getAllCombattants()</pre>
<div class="block">Obtient la liste de tous les combattants présents sur la grille.</div>
<dl>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>La liste des combattants.</dd>
</dl>
</li>
</ul>
<a id="getLargeur()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getLargeur</h4>
<pre class="methodSignature">public&nbsp;int&nbsp;getLargeur()</pre>
<div class="block">Obtient la largeur de la grille.</div>
<dl>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>La largeur de la grille.</dd>
</dl>
</li>
</ul>
<a id="getMessageHandler()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getMessageHandler</h4>
<pre class="methodSignature">public&nbsp;<a href="../utils/strategyMessage/MessageHandler.html" title="interface in utils.strategyMessage">MessageHandler</a>&nbsp;getMessageHandler()</pre>
<div class="block">Obtient le gestionnaire de messages.</div>
<dl>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>Le gestionnaire de messages.</dd>
</dl>
</li>
</ul>
<a id="setMessageHandler(utils.strategyMessage.MessageHandler)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>setMessageHandler</h4>
<pre class="methodSignature">public&nbsp;void&nbsp;setMessageHandler&#8203;(<a href="../utils/strategyMessage/MessageHandler.html" title="interface in utils.strategyMessage">MessageHandler</a>&nbsp;messageHandler)</pre>
<div class="block">Définit le gestionnaire de messages.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>messageHandler</code> - Le nouveau gestionnaire de messages.</dd>
</dl>
</li>
</ul>
<a id="getCase(model.Position)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getCase</h4>
<pre class="methodSignature">public&nbsp;<a href="Case.html" title="class in model">Case</a>&nbsp;getCase&#8203;(<a href="Position.html" title="class in model">Position</a>&nbsp;position)</pre>
<div class="block">Obtient la case à une position donnée.</div>
<dl>
<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
<dd><code><a href="proxy/GrilleInterface.html#getCase(model.Position)">getCase</a></code>&nbsp;in interface&nbsp;<code><a href="proxy/GrilleInterface.html" title="interface in model.proxy">GrilleInterface</a></code></dd>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>position</code> - La position de la case.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>La case correspondante, ou null si la position est invalide.</dd>
</dl>
</li>
</ul>
<a id="gererExplosionsDifferrees()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>gererExplosionsDifferrees</h4>
<pre class="methodSignature">public&nbsp;void&nbsp;gererExplosionsDifferrees()</pre>
<div class="block">Gère les explosions différées des bombes sur la grille.
 Parcourt toutes les cases et fait exploser les bombes si nécessaire.</div>
</li>
</ul>
<a id="getPositionsExplosif()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getPositionsExplosif</h4>
<pre class="methodSignature">public&nbsp;java.util.List&lt;<a href="Position.html" title="class in model">Position</a>&gt;&nbsp;getPositionsExplosif()</pre>
<div class="block">Récupère les positions des explosifs (mines, bombes) sur la grille.</div>
<dl>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>Une liste des positions des explosifs.</dd>
</dl>
</li>
</ul>
<a id="placerMurs()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>placerMurs</h4>
<pre class="methodSignature">public&nbsp;void&nbsp;placerMurs()</pre>
<div class="block">Place des murs aléatoirement sur la grille.
 Le nombre de murs est déterminé par les paramètres du jeu.</div>
</li>
</ul>
<a id="placerCombattants(java.util.List)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>placerCombattants</h4>
<pre class="methodSignature">public&nbsp;void&nbsp;placerCombattants&#8203;(java.util.List&lt;<a href="Combattant.html" title="class in model">Combattant</a>&gt;&nbsp;combattantsAPlacer)</pre>
<div class="block">Place les combattants sur la grille à des positions aléatoires non occupées.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>combattantsAPlacer</code> - La liste des combattants à placer.</dd>
</dl>
</li>
</ul>
<a id="placerPastillesEnergie()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>placerPastillesEnergie</h4>
<pre class="methodSignature">public&nbsp;void&nbsp;placerPastillesEnergie()</pre>
<div class="block">Place des pastilles d'énergie aléatoirement sur la grille.
 Le nombre de pastilles est déterminé par les paramètres du jeu.</div>
</li>
</ul>
<a id="getCombattantsProches(model.Position,int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getCombattantsProches</h4>
<pre class="methodSignature">public&nbsp;java.util.List&lt;<a href="Combattant.html" title="class in model">Combattant</a>&gt;&nbsp;getCombattantsProches&#8203;(<a href="Position.html" title="class in model">Position</a>&nbsp;pos,
                                                        int&nbsp;portee)</pre>
<div class="block">Recherche les combattants proches d'une position donnée dans la grille.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>pos</code> - La position de référence.</dd>
<dd><code>portee</code> - La portée de détection.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>La liste des combattants proches de la position donnée.</dd>
</dl>
</li>
</ul>
<a id="getPositionCentrale()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getPositionCentrale</h4>
<pre class="methodSignature">public&nbsp;<a href="Position.html" title="class in model">Position</a>&nbsp;getPositionCentrale()</pre>
<div class="block">Obtient la position centrale de la grille.</div>
<dl>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>La position centrale.</dd>
</dl>
</li>
</ul>
<a id="genererGrille(java.util.List)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>genererGrille</h4>
<pre class="methodSignature">public&nbsp;void&nbsp;genererGrille&#8203;(java.util.List&lt;<a href="Combattant.html" title="class in model">Combattant</a>&gt;&nbsp;combattantsAPlacer)</pre>
<div class="block">Génère la grille en plaçant les murs, les pastilles d'énergie et les combattants.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>combattantsAPlacer</code> - La liste des combattants à placer sur la grille.</dd>
</dl>
</li>
</ul>
<a id="afficherGrille()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>afficherGrille</h4>
<pre class="methodSignature">public&nbsp;void&nbsp;afficherGrille()</pre>
<div class="block">Affiche la grille dans la console.
 Chaque case est représentée par un caractère spécifique.</div>
<dl>
<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
<dd><code><a href="proxy/GrilleInterface.html#afficherGrille()">afficherGrille</a></code>&nbsp;in interface&nbsp;<code><a href="proxy/GrilleInterface.html" title="interface in model.proxy">GrilleInterface</a></code></dd>
</dl>
</li>
</ul>
<a id="isOver()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>isOver</h4>
<pre class="methodSignature">public&nbsp;boolean&nbsp;isOver()</pre>
<div class="block">Vérifie si le jeu est terminé.
 Le jeu est considéré comme terminé s'il reste un seul combattant en vie ou moins.</div>
<dl>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>true si le jeu est terminé, false sinon.</dd>
</dl>
</li>
</ul>
<a id="getWinner()">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>getWinner</h4>
<pre class="methodSignature">public&nbsp;<a href="Combattant.html" title="class in model">Combattant</a>&nbsp;getWinner()</pre>
<div class="block">Obtient le gagnant du jeu s'il y en a un.</div>
<dl>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>Le combattant gagnant, ou null s'il n'y a pas de gagnant.</dd>
</dl>
</li>
</ul>
</li>
</ul>
</section>
</li>
</ul>
</div>
</div>
</main>
<!-- ========= END OF CLASS DATA ========= -->
<footer role="contentinfo">
<nav role="navigation">
<!-- ======= START OF BOTTOM NAVBAR ====== -->
<div class="bottomNav"><a id="navbar.bottom">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.bottom" title="Skip navigation links">Skip navigation links</a></div>
<a id="navbar.bottom.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="../index.html">Overview</a></li>
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="../deprecated-list.html">Deprecated</a></li>
<li><a href="../index-all.html">Index</a></li>
<li><a href="../help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList" id="allclasses_navbar_bottom">
<li><a href="../allclasses.html">All&nbsp;Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_bottom");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
<noscript>
<div>JavaScript is disabled on your browser.</div>
</noscript>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li>Nested&nbsp;|&nbsp;</li>
<li>Field&nbsp;|&nbsp;</li>
<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li>Field&nbsp;|&nbsp;</li>
<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.detail">Method</a></li>
</ul>
</div>
<a id="skip.navbar.bottom">
<!--   -->
</a></div>
<!-- ======== END OF BOTTOM NAVBAR ======= -->
</nav>
</footer>
</body>
</html>
